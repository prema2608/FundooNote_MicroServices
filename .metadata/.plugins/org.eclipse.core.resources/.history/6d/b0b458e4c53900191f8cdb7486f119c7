package com.bridgelabz.fundoonotes.notemodels;

import java.io.Serializable;
import java.sql.Timestamp;
import java.util.List;
import javax.persistence.CascadeType;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import org.hibernate.annotations.CreationTimestamp;

@SuppressWarnings("serial")
@Entity
@Table(name = "Notes")
public class Note implements Serializable
{

	@Id
	@GeneratedValue
	@Column(name = "noteId")
	private int noteId;

	@Column(name = "title")
	private String title;

	@Column(name = "description")
	private String description;

	
	@CreationTimestamp
	@Column(name = "createdDate")
	private Timestamp createdDate;

	@CreationTimestamp
	@Column(name = "updatedDate")
	private Timestamp updatedDate;

	@Column(name = "isArchive")
	private boolean isArchive;

	
	@Column(name = "isPinned")
	private boolean isPinned;


	@Column(name = "inTrash")
	private boolean inTrash;

	@Column(name="userId")
	private int userId;
	
//	@ManyToMany(fetch=FetchType.EAGER,targetEntity= Labels.class,cascade = CascadeType.ALL)
//	   @JoinTable(name = "Note_Label", joinColumns = { @JoinColumn(name = "noteId") }, inverseJoinColumns = { @JoinColumn(name = "labelId") })
//	   List<Labels> labelList;
	
	
	

	



	
	
}
