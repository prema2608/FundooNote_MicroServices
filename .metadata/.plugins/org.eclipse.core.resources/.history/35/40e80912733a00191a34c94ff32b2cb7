package com.bridgelabz.fundoonotes.noteservice;

import java.util.Optional;

import javax.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import com.bridgelabz.fundoonotes.notedao.NoteDetailsRepository;
import com.bridgelabz.fundoonotes.notemodels.Note;
import com.bridgelabz.fundoonotes.noteutility.GenerateTokenImlp;


@Service
public class NoteServiceImpl implements NoteServiceInf {


	@Autowired
	GenerateTokenImlp generateToken;

	@Autowired
	NoteDetailsRepository noteDetailsRepository;

	//	@Autowired
	//	LabelDetailsRepository labelDetailsRepository;



	public Note createNote(String token,Note note, HttpServletRequest request) {
		int id = generateToken.verifyToken(token);
		note.setUserId(id);
		return  noteDetailsRepository.save(note);	

	}

	public Note updateNote(int noteId, String token, Note note, HttpServletRequest request) {
		int userId = generateToken.verifyToken(token);
		Optional<Note> possiblyUser = noteDetailsRepository.findByUserIdAndNoteId(userId, noteId);
		return possiblyUser.map(Currentnote -> noteDetailsRepository.save(Currentnote
				.setTitle(note.getTitle()).setDescription(note.getDescription())))
				.orElseGet(()->null);
	}

	public boolean deleteNote(int noteId, String token,HttpServletRequest request)
	{
		int userId =generateToken.verifyToken(token);
		Optional<Note> possiblyUser =  noteDetailsRepository.findByUserIdAndNoteId(userId, noteId);
		return possiblyUser.map(Currentnote-> {noteDetailsRepository.delete(Currentnote);
		return true;}).orElseGet(()->false);		
	}




































































































































































































































































































































































































































































































	//
	//	public List<Note> retrieveNote(String token, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		List<Note> notes = noteDetailsRepository.findAllByUserId(userId);
	//		if (!notes.isEmpty()) {
	//			return notes;
	//		}
	//		return null;
	//	}
	//
	//
	//
	//	public Label createLabel(String token, Label label, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		label.setUserId(userId);
	//		return labelDetailsRepository.save(label);
	//	}
	//
	//	public  boolean  deleteLabel(int id,String token, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		Optional<Label> optional=labelDetailsRepository.findByuserIdAndId(userId, id);
	//		return optional.map(label -> {labelDetailsRepository.delete(label);
	//		return true;
	//		}).orElseGet(() -> false);
	//
	//	}
	//
	//	public Label updateLabel(int id,String token, Label label, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		Optional<Label> optional = labelDetailsRepository.findByuserIdAndId(userId, id);
	//		return optional.map(existingLabel-> labelDetailsRepository.save(existingLabel.setLabelName(label.getLabelName()))
	//				).orElseGet(() -> null);    	
	//	}
	//
	//	public List<Label> retrieveLabel(String token, HttpServletRequest request){
	//		int userId = generateToken.verifyToken(token);
	//		List<Label> labels = labelDetailsRepository.findAllByUserId(userId);
	//		if (!labels.isEmpty()) {
	//			return labels;
	//		}
	//		return null;}
	//
	//
	//
	//	public boolean mapNoteLabel(String token, int noteId, int labelId, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		Optional<Label> optional1=labelDetailsRepository.findById(labelId);
	//		Optional<Note> optional2=noteDetailsRepository.findById(noteId);
	//		if (optional1.isPresent() && optional1.isPresent())
	//		{
	//			Note note = optional2.get();
	//			Label label = optional1.get();
	//			if(label.getUserId()==userId && note.getUserId()==userId)
	//			{
	//				List<Label> labels = note.getLabels();
	//				labels.add(label);
	//				if (!labels.isEmpty())
	//				{
	//					note.setLabels(labels);
	//					noteDetailsRepository.save(note);
	//				}
	//				return true;
	//			}}
	//		return false;
	//	}
	//
	//	@Override
	//	public boolean removeNoteLabel(String token, int noteId, int labelId, HttpServletRequest request) {
	//		int userId = generateToken.verifyToken(token);
	//		Optional<Label> optionallabel=labelDetailsRepository.findById(labelId);
	//		Optional<Note> optionalnote=noteDetailsRepository.findById(noteId);
	//		if (optionallabel.isPresent() && optionalnote.isPresent()) {   
	//			Note note = optionalnote.get();
	//			List<Label> labels = note.getLabels();
	//			if (!labels.isEmpty()) {
	//				labels = labels.stream().filter(label -> label.getId() != labelId).collect(Collectors.toList());
	//				note.setLabels(labels);
	//				noteDetailsRepository.delete(note);
	//				return true;
	//			} }
	//		return false;
	//	}
	//
	//
	//}
	//
	//
	//


}
