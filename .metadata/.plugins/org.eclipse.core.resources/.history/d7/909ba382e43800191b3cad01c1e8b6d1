package com.bridgelabz.userutility;

import java.util.Set;

import javax.validation.ConstraintViolation;
import javax.validation.Validator;
import javax.validation.executable.ExecutableValidator;
import javax.validation.metadata.BeanDescriptor;

public class UserValidation implements Validator {
   
   
    public boolean supports(Class<?> userClass) {
        return User.class.equals(userClass);
    }

    public void validate(Object target, Errors errors) {
        User user = (User) target;
        if (!(user.getName().matches("^[a-zA-Z]{3,20}$"))) {
            errors.rejectValue("name", "symbolsPresent", new Object[] { "'name'" }, "name can't be symbols");
        }
        if (!(user.getEmailId().matches("^[a-z0-9._%-]+@[a-z0-9.-]+\\.[a-z]{2,4}$"))) {
            errors.rejectValue("emailId", "symbolsPresent", new Object[] { "'emailId'" }, "emailId can't be symbols");
        }
        if (!(user.getPassword().matches("^[a-zA-Z0-9]$"))) {
            errors.rejectValue("password", "symbolsPresent", new Object[] { "'password'" },
                    "password can't be symbols");
        }
        if (!(String.valueOf(user.getMobileNumber())).matches("^[1-9]{1}[0-9]{9}$")) {
            errors.rejectValue("mobileNumber", "symbolsPresent", new Object[] { "'mobileNumber'" },
                    "mobile number can't be symbols");
        }
        ValidationUtils.rejectIfEmpty(errors, "name", "name.required");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "password", "password.required");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "emailId", "emailId.required");
        ValidationUtils.rejectIfEmptyOrWhitespace(errors, "mobileNumber", "mobileNumber.required");
    }

	@Override
	public <T> Set<ConstraintViolation<T>> validate(T object, Class<?>... groups) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <T> Set<ConstraintViolation<T>> validateProperty(T object, String propertyName, Class<?>... groups) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <T> Set<ConstraintViolation<T>> validateValue(Class<T> beanType, String propertyName, Object value,
			Class<?>... groups) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public BeanDescriptor getConstraintsForClass(Class<?> clazz) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public <T> T unwrap(Class<T> type) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ExecutableValidator forExecutables() {
		// TODO Auto-generated method stub
		return null;
	}

}
}
